<project basedir="." default="compile" name="monitor-agent" xmlns:adapter="uri:adapter" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property file="build.properties"/>
  <property file="ivy.properties"/>
  <import file="${basedir}/ivy/ant-ivy-includes.xml"/> <!-- Ivy tasks -->

  <tstamp>
    <format property="today" pattern="yyyy-MM-dd" locale="en"/>
  </tstamp>

  <target name="init">

    <property name="manifest.title" value="Interlok/Monitor"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="testsrc.dir" value="${basedir}/test/src"/>
    <property name="build-util.lib.dir"     value="${basedir}/../build-util"/>

    <property name="build.dir" value="${basedir}/build"/>
    <property name="resources.dir" value="${basedir}/resources"/>
    <property name="test.resources.dir" value="${basedir}/test/resources"/>
    <property name="example-xml.build.dir"  value="${build.dir}/example-xml"/>

    <property name="classes.build.dir" value="${build.dir}/classes"/>
    <property name="testclasses.build.dir" value="${build.dir}/testclasses"/>
    <property name="doc.dir" value="${basedir}/docs"/>
    <property name="api.doc.dir" value="${build.dir}/api"/>
    <property name="tests.output.dir" value="${basedir}/testoutput"/>
    <property name="html.tests.output.dir" value="${tests.output.dir}/html"/>
    <property name="jar.version" value="${today}"/>

    <property name="javac.include.classes"  value="**/*.java" />
    <property name="junit.test.classes"     value="**/*Test*.java" />
    <property name="javac.target.version"   value="1.8"/>
    <patternset id="javac.exclude.sources">
    </patternset>

    <patternset id="junit.exclude.sources">
    </patternset>
    <patternset id="junit.exclude.tests">
      <exclude name="**/AllTests.java"/>
      <exclude name="**/stubs/*.java"/>
    </patternset>

    <property name="build.tmp.dir" value="${build.dir}/tmp"/>
    <property name="jar.version"            value="${today}-${user.name}"/>
    <property name="project.name"           value="interlok-${ant.project.name}"/>

    <property name="project.jar.name" value = "${project.name}.jar"/>

    <property name="tmp.jar.name" value = "${project.name}-tmp.jar"/>
    <property name="yguard.report" value="${build.dir}/${project.name}-${jar.version}.yguard.xml.gz"/>
	<echo message="ivy publish version is: ${ivy.publish.revision}" />
  </target>

  <target name="prepare" depends="init, prepare-ivy">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${classes.build.dir}"/>
    <mkdir dir="${testclasses.build.dir}"/>
    <mkdir dir="${build.tmp.dir}"/>
    <mkdir dir="${project.dist.dir}"/>
  </target>

  <target name="compile" depends="prepare" description="Compile">
    <property name="compile.classpath" refid="main.classpath"/>
    <echo message="---Ivy Resolved Classpath - ${compile.classpath}" level="verbose"/>
    <javac source="${javac.target.version}" target="${javac.target.version}" destdir="${classes.build.dir}" srcdir="${src.dir}" debug="on" debuglevel="source,lines,vars">
      <classpath refid="main.classpath"/>
    </javac>
  </target>

  <target name="jar.resources" depends="prepare">
    <!-- build the manifest file -->
    <adapter:create-manifest file="${build.dir}/Manifest.mf" title="${manifest.title}"/>

  </target>


  <target name="jar" depends="compile, jar.resources" description="Build a jar file">
    <adapter:create-jar basedir="${classes.build.dir}" jarfile="${project.dist.dir}/${project.jar.name}" manifest="${build.dir}/Manifest.mf" version-title="${manifest.title}"/>
  </target>

  <target name="javadoc" depends="prepare-ivy" description="Create javadocs">
    <adapter:ydoc-javadoc-creator sourcepath="${src.dir}" destdir="${api.doc.dir}">
      <groups>
        <group title="Interlok Monitor Agent" packages="com.adaptris.monitor.agent*"/>
        <group title="Interlok Monitor Agent Packages" packages=":com.adaptris.monitor.agent.*"/>
      </groups>
    </adapter:ydoc-javadoc-creator>
  </target>

  <target name="compile_tests" depends="compile, jar">
    <mkdir dir="${testclasses.build.dir}"/>
    <javac source="${javac.target.version}" target="${javac.target.version}" destdir="${testclasses.build.dir}" srcdir="${testsrc.dir}" debug="on" debuglevel="source,lines,vars">
      <classpath id="classpath.compiletests">
        <pathelement path="${classes.build.dir}"/>
        <path refid="main.classpath"/>
      </classpath>
    </javac>
    <!-- Source our test property files, relying on ant property immutability.
      -->
    <property file="${test.resources.dir}/unit-tests.properties.template"/>
    <echoproperties destfile="${testclasses.build.dir}/unit-tests.properties" prefix="junit."/>
    <replace file="${testclasses.build.dir}/unit-tests.properties" token="junit." value=""/>
  </target>


  <target name="init.tests" depends="compile_tests">
    <!-- clean up old reports -->
    <delete dir="${tests.output.dir}"/>
    <mkdir dir="${tests.output.dir}"/>
    <mkdir dir="${html.tests.output.dir}"/>
  </target>

  <!-- clean -->
  <target name="clean" depends="init" description="Remove build artifacts">
    <delete dir="${build.dir}"/>
    <delete dir="${tests.output.dir}"/>
    <delete>
      <fileset file="${coverage.metadata.file}"/>

    </delete>
  </target>


  <target name="test" depends="run-tests" description="run tests">
    <adapter:test-reports basedir="${tests.output.dir}" reportdir="${html.tests.output.dir}">
      <coverage-filter>
        <exclude name="com/adaptris/msmq/**"/>
      </coverage-filter>
    </adapter:test-reports>
    <fail message="JUNIT tests failed, check output in ${tests.output.dir}" if="junit.failed"/>
  </target>

  <target name="run-tests" depends="init.tests">
    <adapter:execute-tests printsummary="true" fork="yes" showoutput="no" forkmode="once"/>
  </target>

  <target name="test-no-reports" depends="run-tests" description="Run Tests with No reports">
    <fail message="JUNIT tests failed, check output in ${tests.output.dir}" if="junit.failed"/>
  </target>


</project>
